------------------
| GIVEN EXAMPLES |
------------------

true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:Bool. x in id_bool true
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in let prod = fix prodaux in prod 12 5


------------------
| ADDED EXAMPLES |
------------------
	~ Recursion

letrec sum : Nat -> Nat -> Nat = 
	lambda n : Nat. lambda m : Nat.
		if iszero n then m
		else succ (sum (pred n) m);;

letrec prod : Nat -> Nat -> Nat =
	lambda n : Nat. lambda m : Nat.
		if iszero n then 0
		else if iszero m then 0
			else sum n (prod n (pred m));;

letrec fib : Nat -> Nat = 
	lambda n : Nat. 
		if iszero n then 0 
			else if iszero (pred n) then 1 
				else sum (fib (pred n)) (fib (pred (pred n)));;

letrec fact: Nat -> Nat =
    lambda n : Nat. 
    	if iszero n then 1 
    	else prod n (fact (pred n));;



    ~ Strings

x = "abcde";;
concat x "fghij";;
first x;;
rest x;;
first "";;
rest "";;


	~ Lists

NatList = [Nat];;
list = [1, [2, [3, [4, [] : Nat] : Nat] : Nat] : Nat] : Nat;;
list2 = [true, [true, [false, [] : Bool] : Bool] : Bool] : Bool;;
list3 = ["hola", ["mundo", [] : String] : String] : String;;
listEmpty = [] : Nat;;
isEmptyList list : Nat;;
isEmptyList listEmpty : Nat;;
head list : Nat;;
hd list2 : Bool;;
tail list3 : String;;
tl list2 : Bool;;
hd [1, [2, [] : Nat] : Nat] : Nat : Nat;;

letrec length : [Nat] -> Nat =
	lambda l : [Nat].
		if (isEmptyList l : Nat) then 0
		else succ (length (tl l : Nat));;

letrec append : [Nat] -> [Nat] -> [Nat] = 
	lambda l1 : [Nat]. lambda l2 : [Nat].
		if (isEmptyList l1 : Nat) then l2
		else [(hd l1 : Nat), append (tl l1 : Nat) l2] : Nat;;

letrec map : [Nat] -> (Nat -> Nat) -> [Nat] = 
	lambda l : [Nat]. lambda f : (Nat -> Nat).
		if (isEmptyList l : Nat) then ([] : Nat)
		else [(f (hd l : Nat)), map (tl l : Nat) f] : Nat;;


	~ Subtyping

N = Nat;;
N2 = Nat;;
l = [1, [2, [] : N2] : N2] : N2;;
l2 = [1, [2, [3, [] : N] : Nat] : N] : Nat;;
append l l2;;
let id = lambda r : {}. r;;
id {x=1, y=2, z=3};;
x = {x=1, y=2};;
id x;;

	~ Contexto

x = true;;
id = lambda x : Bool. x;;
id x;;

N=Nat
lambda x : N. x;;


	~ Tuplas

tpl={1,2,"hey"};;
first tpl;;
rest tpl;;


{1,2,3}.1;;
(L x:{}. 1) {};;
(L x:{Nat}. x.1) {1};;

let f = lambda x:{Nat, Nat}. x.1 in f {1, 2};;


	~ Records

rcd={a=12, b=true, c="hey"};;
first rcd;;
rest rcd;;

{x=1, y=2, z=3}.x;;
(L x:{a:Nat, b:Nat}. x) {a=1, b=2};;
(L x:{a:Nat, b:Nat}. x.a) {a=1, b=2};;
let fa = lambda x:{a:Nat, b:Nat}. x.a in fa {a=1, b=2};;


	~ Variantes

Int = <pos:Nat, zero:Bool, neg:Nat>;;

p3 = <pos=3> as Int;; 
z0 = <zero=true> as Int;;
n5 = <neg=5> as Int;;

abs p3;;
abs n5;;
abs z0;;



